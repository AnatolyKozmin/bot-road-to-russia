from __future__ import annotations

import re
from datetime import datetime
from typing import Optional

from aiogram import Router, F, types
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (
    KeyboardButton,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
)
from sqlalchemy import select, func
from sqlalchemy.ext.asyncio import AsyncSession

from db.models import Users, MessagesForUsers, Culture, Meet
from sqlalchemy import select
from sqlalchemy.exc import IntegrityError
import logging
logger = logging.getLogger(__name__)

router = Router()


class GetUserCode(StatesGroup):
    code = State()


class GetCulture(StatesGroup):
    price = State()
    category = State()


class GetDate(StatesGroup):
    date_input = State()


class Diary(StatesGroup):
    meet_select = State()
    q1 = State()
    q2 = State()
    q3 = State()
    q4 = State()
    q5 = State()
    photo = State()



price_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ë–µ—Å–ø–ª–∞—Ç–Ω–æ")],
        [KeyboardButton(text="–î–æ 500 ‚ÇΩ")],
        [KeyboardButton(text="–î–æ 1000 ‚ÇΩ")],
    ],
    resize_keyboard=True,
    one_time_keyboard=True,
)

category_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ú—É–∑–µ–π"), KeyboardButton(text="–ü–∞—Ä–∫")],
        [KeyboardButton(text="–ü–æ–∫—É—à–∞—Ç—å"), KeyboardButton(text="–ù–∞ –≤–µ—Å—å –¥–µ–Ω—å")],
    ],
    resize_keyboard=True,
    one_time_keyboard=True,
)

menu_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–í—Å—Ç—Ä–µ—á–∞"), KeyboardButton(text="–î–∞—Ç–∞")],
        [KeyboardButton(text="–î–Ω–µ–≤–Ω–∏–∫")],
    ],
    resize_keyboard=True,
)

back_kb = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="–ù–∞–∑–∞–¥")]], resize_keyboard=True
)

PRICE_MAP = {
    "–ë–µ—Å–ø–ª–∞—Ç–Ω–æ": (False, False),
    "–î–æ 500 ‚ÇΩ": (True, False),
    "–î–æ 1000 ‚ÇΩ": (False, True),
}
CATEGORY_MAP = {
    "–ú—É–∑–µ–π": "is_museum",
    "–ü–∞—Ä–∫": "is_park",
    "–ü–æ–∫—É—à–∞—Ç—å": "is_delicious",
    "–ù–∞ –≤–µ—Å—å –¥–µ–Ω—å": "is_all_day",
}
DATE_RE = re.compile(r"^(@\w+)-(\d{2}\.\d{2}\.\d{4})$")
DIARY_RE = re.compile(r"^–≤—Å—Ç—Ä–µ—á–∞-(@\w+)$", re.IGNORECASE)


@router.message(CommandStart())
async def cmd_start(m: types.Message, state: FSMContext):
    if not m.from_user.username:
        await m.answer("–û—Ç–∫—Ä–æ–π –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
        return
    await m.answer(
            "–ü—Ä–∏–≤–µ—Çüëã\n–ú–µ–Ω—è –∑–æ–≤—É—Ç –†—É—Å—å, —è –±—É–¥—É —Ç–≤–æ–∏–º –ø–æ–º–æ—â–Ω–∏–∫–æ–º –Ω–∞ –ø—Ä–æ—Ç—è–∂–µ–Ω–∏–∏ –≤—Å–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ ¬´–î–æ—Ä–æ–≥–∞ –≤ –†–æ—Å—Å–∏—é¬ªüß°\n\n"
            "–ù–∞–ø–∏—à–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ–π –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä\n\n"
            "P.S –û–Ω –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ç–µ–±–µ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ï—Å–ª–∏ –≤–¥—Ä—É–≥ –ø–æ –∫–∞–∫–∏–º-—Ç–æ –ø—Ä–∏—á–∏–Ω–∞–º —Ç—ã –µ–≥–æ –Ω–µ –ø–æ–ª—É—á–∏–ª, —Å–æ–æ–±—â–∏ –æ–± —ç—Ç–æ–º @AnnaLastochka20 –∏ –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è —Å—é–¥–∞."
        )
    
    await state.set_state(GetUserCode.code)


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–æ–¥—É ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@router.message(GetUserCode.code)
async def process_code(m: types.Message, state: FSMContext, session: AsyncSession):
    code = m.text.strip()
    msgs = (await session.execute(select(MessagesForUsers).where(MessagesForUsers.code == code))).scalars().all()
    if not msgs:
        await m.answer("–ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–º @AnnaLastochka20.")
        return

    if not (await session.execute(select(Users).where(Users.tg_id == m.from_user.id))).scalar_one_or_none():
        session.add(Users(tg_id=m.from_user.id, tg_username=m.from_user.username))
        await session.flush()

    for msg in msgs:
        await m.answer(msg.text_for_message)
    await session.commit()

    await m.answer(
        "<b>1.</b> –ü–æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å‚Ä¶\n<b>2.</b> –°–æ–≥–ª–∞—Å—É–π—Ç–µ –≤—Å—Ç—Ä–µ—á—É –∑–∞ 2 –¥–Ω—è.\n<b>3.</b> –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é.",
        parse_mode="HTML", reply_markup=menu_kb)
    await state.clear()


@router.message(F.text.casefold() == "–≤—Å—Ç—Ä–µ—á–∞")
async def meet_entry(m: types.Message, state: FSMContext):
    await m.answer(text='–ò —Å–Ω–æ–≤–∞ –ø—Ä–∏–≤–µ—Ç! –†–∞–¥–∞, —á—Ç–æ –≤—ã —Å –¥—Ä—É–≥–æ–º –Ω–∞—à–ª–∏ –æ–±—â–∏–π —è–∑—ã–∫. –¢–µ–ø–µ—Ä—å –ø–æ—Ä–∞ –≤—ã–±—Ä–∞—Ç—å –º–µ—Å—Ç–æ –¥–ª—è –≤–∞—à–µ–π –≤—Å—Ç—Ä–µ—á–∏. –û—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –Ω–∏–∂–µ, –∏ —è –æ—Ç–ø—Ä–∞–≤–ª—é —Ç–µ–±–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ –º–µ—Å—Ç–∞ –¥–ª—è –≤–∞—à–µ–≥–æ –¥–æ—Å—É–≥–∞.\n\n'

'–ï—Å–ª–∏ —É —Ç–µ–±—è –¥–≤–∞ –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã—Ö –¥—Ä—É–≥–∞ ‚Äì –∑–∞–ø–æ–ª–Ω—è–π —Ä–∞–∑–¥–µ–ª—ã ¬´–í—Å—Ç—Ä–µ—á–∞¬ª –∏ ¬´–î–∞—Ç–∞¬ª –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ\n\n'

'–í—Ä–µ–º—è –Ω–∞ –≤—ã–±–æ—Ä –º–µ—Å—Ç–∞ –∏ –¥–∞—Ç—ã ‚Äì 2 –¥–Ω—è —Å –º–æ–º–µ–Ω—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.\n\n'

'–í–∞–∂–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã:\n\n'
'1) –ü–µ—Ä–µ–¥ —Ç–µ–º, –∫–∞–∫ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å –±–æ—Ç–∞, —É–∑–Ω–∞–π –º–Ω–µ–Ω–∏–µ —Å–≤–æ–µ–≥–æ –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞ ‚Äì –≤–∞—à–µ —Ä–µ—à–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–æ–≤–º–µ—Å—Ç–Ω—ã–º;\n'
'2) –ï—Å–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –≤–∞—Å –Ω–µ —É—Å—Ç—Ä–æ–∏—Ç, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É ¬´–í—Å—Ç—Ä–µ—á–∞¬ª –≤ –º–µ–Ω—é –µ—â—ë —Ä–∞–∑ –∏ –≤—ã–±–µ—Ä–∏ –¥—Ä—É–≥–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.\n'
'3) –ü–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –≤—ã –≤—ã–±–µ—Ä–µ—Ç–µ –º–µ—Å—Ç–æ —Å –ø–æ–º–æ—â—å—é –±–æ—Ç–∞ –∏ —Å–æ–≥–ª–∞—Å—É–µ—Ç–µ —Å–æ —Å–≤–æ–∏–º –¥—Ä—É–≥–æ–º –¥–∞—Ç—É –≤—Å—Ç—Ä–µ—á–∏, –≤—ã–±–µ—Ä–∏ –≤ –º–µ–Ω—é ¬´–î–∞—Ç–∞¬ª.')
    await m.answer("–í—ã–±–µ—Ä–∏—Ç–µ –±—é–¥–∂–µ—Ç –≤—Å—Ç—Ä–µ—á–∏:", reply_markup=price_kb)
    await state.set_state(GetCulture.price)


@router.message(GetCulture.price)
async def meet_price(m: types.Message, state: FSMContext):
    if m.text not in PRICE_MAP:
        await m.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏.")
        return
    await state.update_data(price=m.text)
    await m.answer("–ö—É–¥–∞ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è?", reply_markup=category_kb)
    await state.set_state(GetCulture.category)


@router.message(GetCulture.category)
async def meet_category(m: types.Message, state: FSMContext, session: AsyncSession):
    if m.text not in CATEGORY_MAP:
        await m.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏.")
        return
    data = await state.update_data(category=m.text)
    price_text, cat_text = data["price"], data["category"]
    up_five, up_hundred = PRICE_MAP[price_text]
    cat_field = CATEGORY_MAP[cat_text]

    await m.answer("–ü–æ–¥–±–∏—Ä–∞—é –º–µ—Å—Ç–æ‚Ä¶", reply_markup=ReplyKeyboardRemove())

    stmt = select(Culture).where(getattr(Culture, cat_field) == True)
    if up_five:
        stmt = stmt.where(Culture.up_five.is_(True))
    if up_hundred:
        stmt = stmt.where(Culture.up_hundred.is_(True))
    place = (await session.execute(stmt.order_by(func.random()).limit(1))).scalar_one_or_none()

    if place:
        text = (
            f"<b>{place.name}</b>\n{place.desc or ''}\n\n"
            f"üìç <b>–ê–¥—Ä–µ—Å:</b> {place.adress}\n"
            f"üí∞ <b>–ë—é–¥–∂–µ—Ç:</b> {price_text}\n"
            f"üè∑Ô∏è <b>–¢–∏–ø:</b> {cat_text}"
        )
        if place.ya_card and place.ya_card.startswith("AgAC"):
            await m.answer_photo(photo=place.ya_card, caption=text, parse_mode="HTML")
        else:
            await m.answer(text + (f"\nüîó {place.ya_card}" if place.ya_card else ''), parse_mode="HTML")
    else:
        await m.answer("–ù–µ –Ω–∞—à–ª–æ—Å—å –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –º–µ—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.")

    await m.answer("–ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –º–µ—Å—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ ¬´–î–∞—Ç–∞¬ª.", reply_markup=menu_kb)
    await state.clear()

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ ¬´–î–∞—Ç–∞¬ª ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@router.message(F.text.casefold() == "–¥–∞—Ç–∞")
async def date_entry(m: types.Message, state: FSMContext):
    await m.answer(
        "–ù–∞–ø–∏—à–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–∞—Ç—É –≤–∞—à–µ–π –≤—Å—Ç—Ä–µ—á–∏, –∫–æ—Ç–æ—Ä—É—é –≤—ã –≤—ã–±—Ä–∞–ª–∏ —Å–æ —Å–≤–æ–∏–º –¥—Ä—É–≥–æ–º –∏ —É–∫–∞–∂–∏ —Å–≤–æ–π ID –∏ –Ω–∏–∫ —Å–≤–æ–µ–≥–æ –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞ –≤ –¢–ì.\n\n"

        "–§–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:"
        "@–Ω–∏–∫–¥—Ä—É–≥–∞-–î–î.–ú–ú.–ì–ì–ì–ì\n\n"
        "–í—Å—ë –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤, —á–µ—Ä–µ–∑ –∫–æ—Ä–æ—Ç–∫–æ–µ —Ç–∏—Ä–µ)",
        reply_markup=back_kb,
    )
    await state.set_state(GetDate.date_input)


@router.message(GetDate.date_input)
async def save_date(m: types.Message, state: FSMContext, session: AsyncSession):
    if m.text.lower() == "–Ω–∞–∑–∞–¥":
        await m.answer("–û–∫, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é.", reply_markup=menu_kb)
        await state.clear()
        return

    mt = DATE_RE.match(m.text.strip())
    if not mt:
        await m.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä: @nick-02.07.2025 –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ù–∞–∑–∞–¥¬ª.")
        logger.warning(f"Invalid date format: {m.text}")
        return

    friend_nick, date_str = mt.groups()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –¥–∞—Ç—ã
    try:
        datetime.strptime(date_str, "%d.%m.%Y")
    except ValueError:
        await m.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì, –Ω–∞–ø—Ä–∏–º–µ—Ä: @nick-02.07.2025")
        logger.warning(f"Invalid date: {date_str}")
        return

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ tg_id
        user = (await session.execute(
            select(Users).where(Users.tg_id == m.from_user.id)
        )).scalar_one_or_none()

        if not user:
            await m.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –í–≤–µ–¥–∏—Ç–µ /start –∏ –∫–æ–¥.")
            await state.clear()
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –≤—Å—Ç—Ä–µ—á–∞
        stmt = select(Meet).where(
            Meet.user_id == user.id,
            Meet.foreigner_tg_name == friend_nick
        )
        meet = (await session.execute(stmt)).scalar_one_or_none()
        if meet:
            meet.date = date_str
        else:
            meet = Meet(
                date=date_str,
                user_id=user.id,
                foreigner_tg_name=friend_nick,
                photo_base64=""
            )
            session.add(meet)
        await session.commit()

        await m.answer("–û—Ç–≤–µ—Ç –∑–∞–ø–∏—Å–∞–Ω! –ü–æ—Å–ª–µ –≤—Å—Ç—Ä–µ—á–∏ –≤—ã–±–µ—Ä–∏—Ç–µ ¬´–î–Ω–µ–≤–Ω–∏–∫¬ª.", reply_markup=menu_kb)
        await state.clear()

    except IntegrityError as e:
        await m.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –°–≤—è–∂–∏—Ç–µ—Å—å —Å @AnnaLastochka20.")
        logger.error(f"IntegrityError in save_date: {str(e)}")
        await session.rollback()
    except Exception as e:
        await m.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        logger.error(f"Unexpected error in save_date: {str(e)}")
        await session.rollback()

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ ¬´–î–Ω–µ–≤–Ω–∏–∫¬ª ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@router.message(F.text.casefold() == "–¥–Ω–µ–≤–Ω–∏–∫")
async def diary_entry(m: types.Message, state: FSMContext, session: AsyncSession):
    # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ tg_id
    user = (await session.execute(
        select(Users).where(Users.tg_id == m.from_user.id)
    )).scalar_one_or_none()

    if not user:
        await m.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –í–≤–µ–¥–∏—Ç–µ /start –∏ –∫–æ–¥.")
        return

    # –ò—â–µ–º –≤—Å—Ç—Ä–µ—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö q1
    stmt = select(Meet).where(Meet.user_id == user.id, Meet.q1.is_(None))
    meets = (await session.execute(stmt)).scalars().all()

    if not meets:
        await m.answer("–£ –≤–∞—Å –Ω–µ—Ç –Ω–µ–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –¥–Ω–µ–≤–Ω–∏–∫–æ–≤. –°–ø–∞—Å–∏–±–æ!")
        return

    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Å—Ç—Ä–µ—á–∏
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"@{x.foreigner_tg_name} ({x.date})", callback_data=f"pick:{x.id}")]
        for x in meets
    ])
    await m.answer("–í–æ—Ç –≤–∞—à–∏ –≤—Å—Ç—Ä–µ—á–∏. –í—ã–±–µ—Ä–∏—Ç–µ, –¥–ª—è –∫–∞–∫–æ–π –∑–∞–ø–æ–ª–Ω–∏—Ç—å –¥–Ω–µ–≤–Ω–∏–∫:", reply_markup=kb)
    await state.set_state(Diary.meet_select)


@router.callback_query(Diary.meet_select, F.data.startswith("pick:"))
async def diary_pick(cb: types.CallbackQuery, state: FSMContext):
    meet_id = int(cb.data.split(":", 1)[1])
    await state.update_data(meet_id=meet_id)
    await cb.message.edit_text("–†–∞—Å—Å–∫–∞–∂–∏, –≥–¥–µ –≤—ã —Å –¥—Ä—É–≥–æ–º –ø–æ–±—ã–≤–∞–ª–∏ –∏ —á–µ–º –∑–∞–Ω–∏–º–∞–ª–∏—Å—å?")
    await state.set_state(Diary.q1)
    await cb.answer()


@router.message(Diary.meet_select)
async def diary_select_by_text(m: types.Message, state: FSMContext, session: AsyncSession):
    match = DIARY_RE.match(m.text.strip())
    if not match:
        await m.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç—Ä–æ–∫–∏. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: –≤—Å—Ç—Ä–µ—á–∞-@nick")
        return
    _, friend_nick = match.groups()

    # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ tg_id
    user = (await session.execute(
        select(Users).where(Users.tg_id == m.from_user.id)
    )).scalar_one_or_none()

    if not user:
        await m.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –í–≤–µ–¥–∏—Ç–µ /start –∏ –∫–æ–¥.")
        return

    # –ò—â–µ–º –≤—Å—Ç—Ä–µ—á—É
    meet = (
        await session.execute(
            select(Meet).where(Meet.user_id == user.id, Meet.foreigner_tg_name == friend_nick)
        )
    ).scalar_one_or_none()
    if not meet:
        await m.answer("–í—Å—Ç—Ä–µ—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å –Ω–∏–∫.")
        return
    await state.update_data(meet_id=meet.id)
    await m.answer("–†–∞—Å—Å–∫–∞–∂–∏, –≥–¥–µ –≤—ã —Å –¥—Ä—É–≥–æ–º –ø–æ–±—ã–≤–∞–ª–∏ –∏ —á–µ–º –∑–∞–Ω–∏–º–∞–ª–∏—Å—å?")
    await state.set_state(Diary.q1)


async def _save_q(m: types.Message, state: FSMContext, session: AsyncSession, field: str, next_state: Optional[State], next_q: str):
    data = await state.get_data()
    meet = await session.get(Meet, data["meet_id"])
    setattr(meet, field, m.text)
    await session.commit()

    if next_state:
        await m.answer(next_q)
        await state.set_state(next_state)
    else:
        await m.answer("–û—Ç–ø—Ä–∞–≤—å —Å—é–¥–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Å –≤–∞—à–µ–π –≤—Å—Ç—Ä–µ—á–∏.")
        await state.set_state(Diary.photo)


@router.message(Diary.q1)
async def diary_q1(m: types.Message, state: FSMContext, session: AsyncSession):
    await _save_q(m, state, session, "q1", Diary.q2, "–ß—Ç–æ —Ç–µ–±–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å?")


@router.message(Diary.q2)
async def diary_q2(m: types.Message, state: FSMContext, session: AsyncSession):
    await _save_q(m, state, session, "q2", Diary.q3, "–í–æ–∑–Ω–∏–∫–∞–ª–∏ –ª–∏ —è–∑—ã–∫–æ–≤—ã–µ –∏–ª–∏ –∫—É–ª—å—Ç—É—Ä–Ω—ã–µ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏?")


@router.message(Diary.q3)
async def diary_q3(m: types.Message, state: FSMContext, session: AsyncSession):
    await _save_q(m, state, session, "q3", Diary.q4, "–ö–∞–∫ –º–æ–∂–Ω–æ –ø–æ–º–æ—á—å –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–º —Å—Ç—É–¥–µ–Ω—Ç–∞–º?")


@router.message(Diary.q4)
async def diary_q4(m: types.Message, state: FSMContext, session: AsyncSession):
    await _save_q(m, state, session, "q4", Diary.q5, "–ï—Å—Ç—å –ª–∏ –µ—â—ë —á—Ç–æ-—Ç–æ, —á–µ–º –±—ã —Ç—ã —Ö–æ—Ç–µ–ª –ø–æ–¥–µ–ª–∏—Ç—å—Å—è?")


@router.message(Diary.q5)
async def diary_q5(m: types.Message, state: FSMContext, session: AsyncSession):
    await _save_q(m, state, session, "q5", None, "–û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ.")


@router.message(Diary.photo, F.photo)
async def diary_photo(m: types.Message, state: FSMContext, session: AsyncSession):
    data = await state.get_data()
    meet = await session.get(Meet, data["meet_id"])
    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º file_id –∫–∞–∫ —Ç–µ–∫—Å—Ç; –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –º–æ–∂–Ω–æ —Å–∫–∞—á–∏–≤–∞—Ç—å –∏ —Ö—Ä–∞–Ω–∏—Ç—å base64
    meet.photo_base64 = m.photo[-1].file_id
    await session.commit()

    await m.answer(
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤! –ú—ã –±—ã–ª–∏ —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å —Ç–µ–±—è –≤ –ø—Ä–æ–µ–∫—Ç–µ ¬´–î–æ—Ä–æ–≥–∞ –≤ –†–æ—Å—Å–∏—é¬ª.\n"
        "–ù–µ –∑–∞–±—ã–≤–∞–π —Å–ª–µ–¥–∏—Ç—å –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏: https://vk.com/roadtorussia",
        reply_markup=menu_kb,
    )
    await state.clear()